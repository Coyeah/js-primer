/*! 版权所有，翻版必究 */!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,n){!function(e,t){if(!b[e]||!w[e])return;for(var n in w[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(h[n]=t[n]);0==--v&&0===y&&E()}(e,n),t&&t(e,n)};var n,r=!0,o="bc4f6cbc64bcc80ef624",i=1e4,a={},u=[],c=[];function s(e){var t=k[e];if(!t)return P;var r=function(r){return t.hot.active?(k[r]?-1===k[r].parents.indexOf(e)&&k[r].parents.push(e):(u=[e],n=r),-1===t.children.indexOf(r)&&t.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+e),u=[]),P(r)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return P[e]},set:function(t){P[e]=t}}};for(var i in P)Object.prototype.hasOwnProperty.call(P,i)&&"e"!==i&&"t"!==i&&Object.defineProperty(r,i,o(i));return r.e=function(e){return"ready"===f&&d("prepare"),y++,P.e(e).then(t,function(e){throw t(),e});function t(){y--,"prepare"===f&&(g[e]||j(e),0===y&&0===v&&E())}},r.t=function(e,t){return 1&t&&(e=r(e)),P.t(e,-2&t)},r}var l=[],f="idle";function d(e){f=e;for(var t=0;t<l.length;t++)l[t].call(null,e)}var p,h,m,v=0,y=0,g={},w={},b={};function O(e){return+e+""===e?+e:e}function _(e){if("idle"!==f)throw new Error("check() is only allowed in idle status");return r=e,d("check"),function(e){return e=e||1e4,new Promise(function(t,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var r=new XMLHttpRequest,i=P.p+""+o+".hot-update.json";r.open("GET",i,!0),r.timeout=e,r.send(null)}catch(e){return n(e)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)n(new Error("Manifest request to "+i+" timed out."));else if(404===r.status)t();else if(200!==r.status&&304!==r.status)n(new Error("Manifest request to "+i+" failed."));else{try{var e=JSON.parse(r.responseText)}catch(e){return void n(e)}t(e)}}})}(i).then(function(e){if(!e)return d("idle"),null;w={},g={},b=e.c,m=e.h,d("prepare");var t=new Promise(function(e,t){p={resolve:e,reject:t}});h={};return j(0),"prepare"===f&&0===y&&0===v&&E(),t})}function j(e){b[e]?(w[e]=!0,v++,function(e){var t=document.getElementsByTagName("head")[0],n=document.createElement("script");n.charset="utf-8",n.src=P.p+""+e+"."+o+".hot-update.js",t.appendChild(n)}(e)):g[e]=!0}function E(){d("ready");var e=p;if(p=null,e)if(r)Promise.resolve().then(function(){return T(r)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var n in h)Object.prototype.hasOwnProperty.call(h,n)&&t.push(O(n));e.resolve(t)}}function T(t){if("ready"!==f)throw new Error("apply() is only allowed in ready status");var n,r,i,c,s;function l(e){for(var t=[e],n={},r=t.slice().map(function(e){return{chain:[e],id:e}});r.length>0;){var o=r.pop(),i=o.id,a=o.chain;if((c=k[i])&&!c.hot._selfAccepted){if(c.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:i};if(c.hot._main)return{type:"unaccepted",chain:a,moduleId:i};for(var u=0;u<c.parents.length;u++){var s=c.parents[u],l=k[s];if(l){if(l.hot._declinedDependencies[i])return{type:"declined",chain:a.concat([s]),moduleId:i,parentId:s};-1===t.indexOf(s)&&(l.hot._acceptedDependencies[i]?(n[s]||(n[s]=[]),p(n[s],[i])):(delete n[s],t.push(s),r.push({chain:a.concat([s]),id:s})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];-1===e.indexOf(r)&&e.push(r)}}t=t||{};var v={},y=[],g={},w=function(){console.warn("[HMR] unexpected require("+j.moduleId+") to disposed module")};for(var _ in h)if(Object.prototype.hasOwnProperty.call(h,_)){var j;s=O(_);var E=!1,T=!1,M=!1,D="";switch((j=h[_]?l(s):{type:"disposed",moduleId:_}).chain&&(D="\nUpdate propagation: "+j.chain.join(" -> ")),j.type){case"self-declined":t.onDeclined&&t.onDeclined(j),t.ignoreDeclined||(E=new Error("Aborted because of self decline: "+j.moduleId+D));break;case"declined":t.onDeclined&&t.onDeclined(j),t.ignoreDeclined||(E=new Error("Aborted because of declined dependency: "+j.moduleId+" in "+j.parentId+D));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(j),t.ignoreUnaccepted||(E=new Error("Aborted because "+s+" is not accepted"+D));break;case"accepted":t.onAccepted&&t.onAccepted(j),T=!0;break;case"disposed":t.onDisposed&&t.onDisposed(j),M=!0;break;default:throw new Error("Unexception type "+j.type)}if(E)return d("abort"),Promise.reject(E);if(T)for(s in g[s]=h[s],p(y,j.outdatedModules),j.outdatedDependencies)Object.prototype.hasOwnProperty.call(j.outdatedDependencies,s)&&(v[s]||(v[s]=[]),p(v[s],j.outdatedDependencies[s]));M&&(p(y,[j.moduleId]),g[s]=w)}var C,I=[];for(r=0;r<y.length;r++)s=y[r],k[s]&&k[s].hot._selfAccepted&&I.push({module:s,errorHandler:k[s].hot._selfAccepted});d("dispose"),Object.keys(b).forEach(function(e){!1===b[e]&&function(e){delete installedChunks[e]}(e)});for(var B,x,H=y.slice();H.length>0;)if(s=H.pop(),c=k[s]){var q={},L=c.hot._disposeHandlers;for(i=0;i<L.length;i++)(n=L[i])(q);for(a[s]=q,c.hot.active=!1,delete k[s],delete v[s],i=0;i<c.children.length;i++){var N=k[c.children[i]];N&&((C=N.parents.indexOf(s))>=0&&N.parents.splice(C,1))}}for(s in v)if(Object.prototype.hasOwnProperty.call(v,s)&&(c=k[s]))for(x=v[s],i=0;i<x.length;i++)B=x[i],(C=c.children.indexOf(B))>=0&&c.children.splice(C,1);for(s in d("apply"),o=m,g)Object.prototype.hasOwnProperty.call(g,s)&&(e[s]=g[s]);var S=null;for(s in v)if(Object.prototype.hasOwnProperty.call(v,s)&&(c=k[s])){x=v[s];var A=[];for(r=0;r<x.length;r++)if(B=x[r],n=c.hot._acceptedDependencies[B]){if(-1!==A.indexOf(n))continue;A.push(n)}for(r=0;r<A.length;r++){n=A[r];try{n(x)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:s,dependencyId:x[r],error:e}),t.ignoreErrored||S||(S=e)}}}for(r=0;r<I.length;r++){var W=I[r];s=W.module,u=[s];try{P(s)}catch(e){if("function"==typeof W.errorHandler)try{W.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:s,error:n,originalError:e}),t.ignoreErrored||S||(S=n),S||(S=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:s,error:e}),t.ignoreErrored||S||(S=e)}}return S?(d("fail"),Promise.reject(S)):(d("idle"),new Promise(function(e){e(y)}))}var k={};function P(t){if(k[t])return k[t].exports;var r=k[t]={i:t,l:!1,exports:{},hot:function(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var r=0;r<e.length;r++)t._acceptedDependencies[e[r]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:_,apply:T,status:function(e){if(!e)return f;l.push(e)},addStatusHandler:function(e){l.push(e)},removeStatusHandler:function(e){var t=l.indexOf(e);t>=0&&l.splice(t,1)},data:a[e]};return n=void 0,t}(t),parents:(c=u,u=[],c),children:[]};return e[t].call(r.exports,r,r.exports,s(t)),r.l=!0,r.exports}P.m=e,P.c=k,P.d=function(e,t,n){P.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},P.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},P.t=function(e,t){if(1&t&&(e=P(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(P.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)P.d(n,r,function(t){return e[t]}.bind(null,r));return n},P.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return P.d(t,"a",t),t},P.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},P.p="/",P.h=function(){return o},s("./src/index.js")(P.s="./src/index.js")}({"./src/action/Observer.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){var e={};return{regist:function(t,n){void 0===e[t]?e[t]=[n]:e[t].push(n)},fire:function(t,n){if(e[t])for(var r={type:t,args:n||[]},o=0,i=e[t].length;o<i;o++)e[t][o].call(this,r)},remove:function(t,n){if(e[t]instanceof Array)for(var r=e[t].length-1;r>=0;r--)e[t][r]===n&&e[t].splice(r,1)}}}},"./src/action/domDraw.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){return document.getElementById(e)}("clients");t.default=function(e,t){switch(e){case"customerCreate":for(var n=0;n<t.amount;n++)r.innerHTML+='<img style="left:1100px;top:20px;" src="./image/customer.png" />';break;case"customerOut":r.removeChild(t.dom);break;case"domMove":t.dom.style.left=t.left+"px",t.dom.style.top=t.top+"px"}}},"./src/action/observerFlow.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});a(n("./src/class/Customer.js"));var r=n("./src/class/Staff.js"),o=a(n("./src/action/Observer.js")),i=a(n("./src/action/domDraw.js"));function a(e){return e&&e.__esModule?e:{default:e}}var u=(0,o.default)(),c=0,s={0:null,1:null,2:null,3:null,4:null,5:null,6:null,7:null,8:null,9:null},l=[[20,910],[20,830],[20,750],[20,670],[20,590],[120,910],[120,830],[120,750],[120,670],[120,590]],f=[],d={},p={},h={},m=[],v={},y=void 0,g=void 0,w=30,b=document.getElementById("operate").getElementsByTagName("button")[0],O=document.getElementById("operate").getElementsByTagName("button")[1],_=document.getElementById("operate").getElementsByTagName("button")[2],j=document.getElementById("operate").getElementsByTagName("button")[3],E=document.getElementById("operate").getElementsByTagName("button")[4],T=function(e){v=M(e.menu),y=P("waiter",e.staff),g=P("chef",e.staff),O.onclick=function(){var t=new Date,n="w"+t.getTime(),o=new r.Waiter(n,3e3,t.getTime(),"waiter");e.cash-=3e3,e.hire(o),y=P("waiter",e.staff),D("seats",e)},_.onclick=function(){X()&&e.fire(F()),y=P("waiter",e.staff)},j.onclick=function(){var t=new Date,n="c"+t.getTime(),o=new r.Chef(n,5e3,t.getTime(),"chef");e.cash-=5e3,e.hire(o),g=P("chef",e.staff),D("seats",e),console.log(g)},E.onclick=function(){J()&&e.fire(G()),g=P("chef",e.staff)},k(e),(0,i.default)("customerCreate",{amount:e.seats}),u.regist("customerWait",I),u.regist("waiterCalled",B),u.regist("chefCalled",x)},k=function e(t){D("seats",t),setTimeout(function(){e(t)},500)},P=function(e,t){return t.filter(function(t,n){return t.type==e})},M=function(e){for(var t={},n=0;n<e.length;n++)t[e[n].name]=e[n];return t},D=function(e,t){document.getElementById("operate").getElementsByTagName("p")[1].innerHTML="餐厅本金："+t.cash,document.getElementById("operate").getElementsByTagName("p")[2].innerHTML="排队人数："+(t.size()-c),document.getElementById("operate").getElementsByTagName("p")[3].innerHTML="空余位置："+(t.seats-c),document.getElementById("operate").getElementsByTagName("p")[4].innerHTML="队列数量："+t.size()},C=function e(t){if(t.size()<30){t.enqueue();var n=(new Date).getTime();t.queue[t.size()-1].tag(n),u.fire("customerWait",{restaurant:t,id:n}),D("queue",t)}w>0&&(w--,console.log("123"),setTimeout(function(){e(t)},1e3*Math.floor(5*Math.random()+1)))},I=function(e){var t=e.args.restaurant,n=e.args.id;switch(e.type){case"customerWait":c<10&&(c++,H(t,n))}},B=function e(t){var n=t.args.restaurant;if(0!=m.length)if(X()){var r=m[0];m.shift();var o=F();switch(p[o.name]=o,r.type){case"customerOrder":var i=r.id;q(n,i,o);break;case"chefOrder":var a=r.dishes;S(n,a,o)}}else setTimeout(function(){e(t)},2e3)},x=function e(t){var n=t.args.restaurant;if(console.log(f),0!=f.length&&(console.log(J()),J())){var r=G();switch(h[r.name]=r,t.type){case"chefCalled":u.remove(t.type,e),N(n,r),0!=f.length&&e(t)}}},H=function(e,t){s[R(null)]=t,z(e,t).sitdown();var n=l[R(t)];new Promise(function(e,r){setTimeout(function(){(0,i.default)("domMove",{left:n[1],top:n[0],dom:document.getElementById("clients").getElementsByTagName("img")[R(t)]}),e()},500)}).then(function(){m.push({id:t,type:"customerOrder"}),u.fire("waiterCalled",{restaurant:e})})},q=function(e,t,n){new Promise(function(n,r){setTimeout(function(){for(var r=Math.floor(10*Math.random());r>0;r--)z(e,t).order(e.menu);d[t]=z(e,t).orderList.length,n()},3e3)}).then(function(){n.getOrder(z(e,t).orderList),L(e,t,n)})},L=function(e,t,n){for(var r=z(e,t).orderList,o=0,i=function(e){var n=f.filter(function(t,n){return t.name==r[e]});0==n.length?f.push({amount:[t],name:r[e]}):n[0].amount.push(t),o+=v[r[e]].cost},a=0;a<r.length;a++)i(a);e.cash-=o,D("cash",e),delete p[n.name],u.fire("chefCalled",{restaurant:e})},N=function e(t,n){var r=f.shift();n.cooking(r);new Promise(function(e,t){setTimeout(function(){e()},1e3*v[r.name].unitTime)}).then(function(){m.push({type:"chefOrder",dishes:r}),u.fire("waiterCalled",{restaurant:t}),0!=f.length?e(t,n):(delete h[n.name],u.regist("chefCalled",x))})},S=function(e,t,n){for(var r=0;r<t.amount.length;r++)d[t.amount[r]]--,n.serverDishes(),0==d[t.amount[r]]&&(A(e,t.amount[r]),delete d[t.amount[r]]);delete p[n.name],console.log(d)},A=function(e,t){z(e,t).eat();new Promise(function(n,r){setTimeout(function(){n()},3*z(e,t).orderList.length*1e3)}).then(function(){W(e,t)})},W=function(e,t){for(var n=z(e,t).orderList,r=0,o=0;o<n.length;o++)r+=v[n[o]].price;e.cash+=r,D("cash",e);new Promise(function(e,n){(0,i.default)("domMove",{left:1e3,top:800,dom:document.getElementById("clients").getElementsByTagName("img")[R(t)]}),setTimeout(function(){(0,i.default)("domMove",{left:1100,top:20,dom:document.getElementById("clients").getElementsByTagName("img")[R(t)]}),s[R(t)]=null,e()},500)}).then(function(){if(z(e,t).leave(),e.dequeue(U(e,t)),c--,e.size()>c){var n=e.queue[c].id;u.fire("customerWait",{restaurant:e,id:n})}});D("queue",e)},R=function(e){for(var t in s)if(s[t]==e)return t},U=function(e,t){for(var n=0;n<e.seats;n++)if(e.queue[n].id==t)return n;return-1},z=function(e,t){for(var n=0;n<e.seats;n++)if(e.queue[n].id==t)return e.queue[n];return null},F=function(){return y.filter(function(e,t){return!p[e.name]})[0]},X=function(){var e=0;for(var t in p)e++;return e!=y.length},G=function(){return g.filter(function(e,t){return!h[e.name]})[0]},J=function(){var e=0;for(var t in h)e++;return e!=g.length};t.default=function(e){T(e),b.onclick=function(){C(e)}}},"./src/class/Customer.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.orderList=[],this.id=""}return r(e,[{key:"tag",value:function(e){this.id=e}},{key:"order",value:function(e){var t=Math.floor(10*Math.random());console.log(">> Customer "+this.id+" Order "+e[t].name+"."),this.orderList.push(e[t].name)}},{key:"eat",value:function(){console.log(">> Customer "+this.id+" Eating.")}},{key:"sitdown",value:function(){console.log(">> Customer "+this.id+" Sitdown.")}},{key:"leave",value:function(){console.log(">> Customer "+this.id+" Leaving.")}}]),e}();t.default=o},"./src/class/Dishes.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function e(t,n,r,o){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.name=t,this.cost=n,this.price=r,this.unitTime=o}},"./src/class/Restaurant.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function(e){return e&&e.__esModule?e:{default:e}}(n("./src/class/Customer.js"));var i=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.cash=t.cash,this.seats=t.seats,this.staff=t.staff,this.queue=t.queue,this.menu=t.menu}return r(e,[{key:"fire",value:function(e){this.staff=this.staff.filter(function(t,n){return t.id!=e.id})}},{key:"hire",value:function(e){this.staff.push(e)}},{key:"enqueue",value:function(){var e=new o.default;this.queue.push(e)}},{key:"dequeue",value:function(e){return e?this.queue.splice(e,1):this.queue.shift()}},{key:"size",value:function(){return this.queue.length}}]),e}();t.default=i},"./src/class/Staff.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var u=function(){function e(t,n,r,o){a(this,e),this.name=t,this.salary=n,this.id=r,this.type=o,this.busy=!1}return r(e,[{key:"work",value:function(){console.log("A work by staff.")}}]),e}(),c=function(e){function t(e,n,r,i){return a(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n,r,i))}return i(t,u),r(t,[{key:"getOrder",value:function(e){console.log(">> Waitert "+this.name+" Order "+e+".")}},{key:"serverDishes",value:function(){console.log(">> Waiter "+this.name+" Server.")}}]),t}(),s=function(e){function t(e,n,r,i){a(this,t);var u=o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n,r,i));return u.current="",u}return i(t,u),r(t,[{key:"cooking",value:function(e){this.current=e,console.log(">> Chef "+this.name+" Cooking "+e.name+".")}},{key:"finishedCook",value:function(){console.log(">> Chef "+this.name+" Done.")}}]),t}();t.Waiter=c,t.Chef=s},"./src/index.js":function(e,t,n){"use strict";var r=a(n("./src/class/Restaurant.js")),o=(n("./src/class/Staff.js"),a(n("./src/class/Customer.js")),a(n("./src/class/Dishes.js"))),i=a(n("./src/action/observerFlow.js"));function a(e){return e&&e.__esModule?e:{default:e}}var u=[new o.default("fish",10,25,3),new o.default("tofu",20,34,5),new o.default("chicken",12,28,6),new o.default("dumplings",22,42,2),new o.default("rice",2,5,1),new o.default("cabbage",16,32,5),new o.default("beef",6,22,8),new o.default("salad",14,31,4),new o.default("sandwich",21,48,5),new o.default("bacon",11,29,2)],c=new r.default({cash:1e4,seats:10,staff:[],queue:[],repast:[],menu:u}),s=document.getElementById("operate").getElementsByTagName("p")[0];(0,i.default)(c),console.log(c),function e(){var t=new Date;s.innerHTML=t.toLocaleTimeString(),setTimeout(function(){e()},1e3)}()}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,