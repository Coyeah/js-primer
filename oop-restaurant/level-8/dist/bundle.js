/*! 版权所有，翻版必究 */!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,n){!function(e,t){if(!b[e]||!w[e])return;for(var n in w[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(h[n]=t[n]);0==--y&&0===g&&E()}(e,n),t&&t(e,n)};var n,r=!0,o="c4db89812e894bcf9646",i=1e4,a={},u=[],c=[];function s(e){var t=T[e];if(!t)return M;var r=function(r){return t.hot.active?(T[r]?-1===T[r].parents.indexOf(e)&&T[r].parents.push(e):(u=[e],n=r),-1===t.children.indexOf(r)&&t.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+e),u=[]),M(r)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return M[e]},set:function(t){M[e]=t}}};for(var i in M)Object.prototype.hasOwnProperty.call(M,i)&&"e"!==i&&"t"!==i&&Object.defineProperty(r,i,o(i));return r.e=function(e){return"ready"===f&&d("prepare"),g++,M.e(e).then(t,function(e){throw t(),e});function t(){g--,"prepare"===f&&(v[e]||j(e),0===g&&0===y&&E())}},r.t=function(e,t){return 1&t&&(e=r(e)),M.t(e,-2&t)},r}var l=[],f="idle";function d(e){f=e;for(var t=0;t<l.length;t++)l[t].call(null,e)}var p,h,m,y=0,g=0,v={},w={},b={};function O(e){return+e+""===e?+e:e}function _(e){if("idle"!==f)throw new Error("check() is only allowed in idle status");return r=e,d("check"),function(e){return e=e||1e4,new Promise(function(t,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var r=new XMLHttpRequest,i=M.p+""+o+".hot-update.json";r.open("GET",i,!0),r.timeout=e,r.send(null)}catch(e){return n(e)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)n(new Error("Manifest request to "+i+" timed out."));else if(404===r.status)t();else if(200!==r.status&&304!==r.status)n(new Error("Manifest request to "+i+" failed."));else{try{var e=JSON.parse(r.responseText)}catch(e){return void n(e)}t(e)}}})}(i).then(function(e){if(!e)return d("idle"),null;w={},v={},b=e.c,m=e.h,d("prepare");var t=new Promise(function(e,t){p={resolve:e,reject:t}});h={};return j(0),"prepare"===f&&0===g&&0===y&&E(),t})}function j(e){b[e]?(w[e]=!0,y++,function(e){var t=document.getElementsByTagName("head")[0],n=document.createElement("script");n.charset="utf-8",n.src=M.p+""+e+"."+o+".hot-update.js",t.appendChild(n)}(e)):v[e]=!0}function E(){d("ready");var e=p;if(p=null,e)if(r)Promise.resolve().then(function(){return k(r)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var n in h)Object.prototype.hasOwnProperty.call(h,n)&&t.push(O(n));e.resolve(t)}}function k(t){if("ready"!==f)throw new Error("apply() is only allowed in ready status");var n,r,i,c,s;function l(e){for(var t=[e],n={},r=t.slice().map(function(e){return{chain:[e],id:e}});r.length>0;){var o=r.pop(),i=o.id,a=o.chain;if((c=T[i])&&!c.hot._selfAccepted){if(c.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:i};if(c.hot._main)return{type:"unaccepted",chain:a,moduleId:i};for(var u=0;u<c.parents.length;u++){var s=c.parents[u],l=T[s];if(l){if(l.hot._declinedDependencies[i])return{type:"declined",chain:a.concat([s]),moduleId:i,parentId:s};-1===t.indexOf(s)&&(l.hot._acceptedDependencies[i]?(n[s]||(n[s]=[]),p(n[s],[i])):(delete n[s],t.push(s),r.push({chain:a.concat([s]),id:s})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];-1===e.indexOf(r)&&e.push(r)}}t=t||{};var y={},g=[],v={},w=function(){console.warn("[HMR] unexpected require("+j.moduleId+") to disposed module")};for(var _ in h)if(Object.prototype.hasOwnProperty.call(h,_)){var j;s=O(_);var E=!1,k=!1,P=!1,D="";switch((j=h[_]?l(s):{type:"disposed",moduleId:_}).chain&&(D="\nUpdate propagation: "+j.chain.join(" -> ")),j.type){case"self-declined":t.onDeclined&&t.onDeclined(j),t.ignoreDeclined||(E=new Error("Aborted because of self decline: "+j.moduleId+D));break;case"declined":t.onDeclined&&t.onDeclined(j),t.ignoreDeclined||(E=new Error("Aborted because of declined dependency: "+j.moduleId+" in "+j.parentId+D));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(j),t.ignoreUnaccepted||(E=new Error("Aborted because "+s+" is not accepted"+D));break;case"accepted":t.onAccepted&&t.onAccepted(j),k=!0;break;case"disposed":t.onDisposed&&t.onDisposed(j),P=!0;break;default:throw new Error("Unexception type "+j.type)}if(E)return d("abort"),Promise.reject(E);if(k)for(s in v[s]=h[s],p(g,j.outdatedModules),j.outdatedDependencies)Object.prototype.hasOwnProperty.call(j.outdatedDependencies,s)&&(y[s]||(y[s]=[]),p(y[s],j.outdatedDependencies[s]));P&&(p(g,[j.moduleId]),v[s]=w)}var x,C=[];for(r=0;r<g.length;r++)s=g[r],T[s]&&T[s].hot._selfAccepted&&C.push({module:s,errorHandler:T[s].hot._selfAccepted});d("dispose"),Object.keys(b).forEach(function(e){!1===b[e]&&function(e){delete installedChunks[e]}(e)});for(var H,I,B=g.slice();B.length>0;)if(s=B.pop(),c=T[s]){var q={},L=c.hot._disposeHandlers;for(i=0;i<L.length;i++)(n=L[i])(q);for(a[s]=q,c.hot.active=!1,delete T[s],delete y[s],i=0;i<c.children.length;i++){var N=T[c.children[i]];N&&((x=N.parents.indexOf(s))>=0&&N.parents.splice(x,1))}}for(s in y)if(Object.prototype.hasOwnProperty.call(y,s)&&(c=T[s]))for(I=y[s],i=0;i<I.length;i++)H=I[i],(x=c.children.indexOf(H))>=0&&c.children.splice(x,1);for(s in d("apply"),o=m,v)Object.prototype.hasOwnProperty.call(v,s)&&(e[s]=v[s]);var S=null;for(s in y)if(Object.prototype.hasOwnProperty.call(y,s)&&(c=T[s])){I=y[s];var W=[];for(r=0;r<I.length;r++)if(H=I[r],n=c.hot._acceptedDependencies[H]){if(-1!==W.indexOf(n))continue;W.push(n)}for(r=0;r<W.length;r++){n=W[r];try{n(I)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:s,dependencyId:I[r],error:e}),t.ignoreErrored||S||(S=e)}}}for(r=0;r<C.length;r++){var A=C[r];s=A.module,u=[s];try{M(s)}catch(e){if("function"==typeof A.errorHandler)try{A.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:s,error:n,originalError:e}),t.ignoreErrored||S||(S=n),S||(S=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:s,error:e}),t.ignoreErrored||S||(S=e)}}return S?(d("fail"),Promise.reject(S)):(d("idle"),new Promise(function(e){e(g)}))}var T={};function M(t){if(T[t])return T[t].exports;var r=T[t]={i:t,l:!1,exports:{},hot:function(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var r=0;r<e.length;r++)t._acceptedDependencies[e[r]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:_,apply:k,status:function(e){if(!e)return f;l.push(e)},addStatusHandler:function(e){l.push(e)},removeStatusHandler:function(e){var t=l.indexOf(e);t>=0&&l.splice(t,1)},data:a[e]};return n=void 0,t}(t),parents:(c=u,u=[],c),children:[]};return e[t].call(r.exports,r,r.exports,s(t)),r.l=!0,r.exports}M.m=e,M.c=T,M.d=function(e,t,n){M.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},M.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},M.t=function(e,t){if(1&t&&(e=M(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(M.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)M.d(n,r,function(t){return e[t]}.bind(null,r));return n},M.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return M.d(t,"a",t),t},M.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},M.p="/",M.h=function(){return o},s("./src/index.js")(M.s="./src/index.js")}({"./src/action/Observer.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){var e={};return{regist:function(t,n){void 0===e[t]?e[t]=[n]:e[t].push(n)},fire:function(t,n){if(e[t])for(var r={type:t,args:n||[]},o=0,i=e[t].length;o<i;o++)e[t][o].call(this,r)},remove:function(t,n){if(e[t]instanceof Array)for(var r=e[t].length-1;r>=0;r--)e[t][r]===n&&e[t].splice(r,1)}}}},"./src/action/domDraw.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){return document.getElementById(e)},o=r("clients"),i=r("worker");t.default=function(e,t){switch(e){case"customerCreate":for(var n=0;n<t.amount;n++)o.innerHTML+='<img style="left:1100px;top:20px;" src="./image/customer.png" />';break;case"customerOut":o.removeChild(t.dom);break;case"domMove":t.dom.style.left=t.left+"px",t.dom.style.top=t.top+"px";break;case"addWorker":var r="";t.type?(r='<img style="left:500px;top:'+t.top+'px;" src="./image/waiter.png" />',i.innerHTML+=r):(r='<img style="left:190px;top:'+t.top+'px;" src="./image/chef.png" />',i.innerHTML=r+i.innerHTML);break;case"delWorker":var a=i.innerHTML.split(">");t.type?(a=a.slice(0,a.length-2)).push(""):a.shift(),console.log(a);var u=a.join(">");i.innerHTML=u}}},"./src/action/observerFlow.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});a(n("./src/class/Customer.js"));var r=n("./src/class/Staff.js"),o=a(n("./src/action/Observer.js")),i=a(n("./src/action/domDraw.js"));function a(e){return e&&e.__esModule?e:{default:e}}var u=(0,o.default)(),c=0,s={0:null,1:null,2:null,3:null,4:null,5:null,6:null,7:null,8:null,9:null},l=[[20,910],[20,830],[20,750],[20,670],[20,590],[120,910],[120,830],[120,750],[120,670],[120,590]],f=[120,200,280,360,440,520],d=[],p={},h={},m={},y=[],g={},v=void 0,w=void 0,b=(document.getElementById("text"),document.getElementById("operate").getElementsByTagName("button")[0]),O=document.getElementById("operate").getElementsByTagName("button")[1],_=document.getElementById("operate").getElementsByTagName("button")[2],j=document.getElementById("operate").getElementsByTagName("button")[3],E=document.getElementById("operate").getElementsByTagName("button")[4],k=function(e){g=P(e.menu),v=M("waiter",e.staff),w=M("chef",e.staff),O.onclick=function(){if(v.length<5){var t=new Date,n="w"+t.getTime(),o=new r.Waiter(n,3e3,t.getTime(),"waiter");e.cash-=3e3,(0,i.default)("addWorker",{type:!0,top:f[v.length]}),e.hire(o),v=M("waiter",e.staff),D("seats",e)}},_.onclick=function(){0!=v.length&&(X()&&e.fire(F()),v=M("waiter",e.staff),(0,i.default)("delWorker",{type:!0,top:f[v.length]}))},j.onclick=function(){if(w.length<5){var t=new Date,n="c"+t.getTime(),o=new r.Chef(n,5e3,t.getTime(),"chef");e.cash-=5e3,(0,i.default)("addWorker",{type:!1,top:f[w.length]}),e.hire(o),w=M("chef",e.staff),D("seats",e)}},E.onclick=function(){0!=w.length&&(J()&&e.fire(G()),w=M("chef",e.staff),(0,i.default)("delWorker",{type:!1,top:f[v.length]}))},T(e),(0,i.default)("customerCreate",{amount:e.seats}),u.regist("customerWait",C),u.regist("waiterCalled",H),u.regist("chefCalled",I)},T=function e(t){D("seats",t),setTimeout(function(){e(t)},500)},M=function(e,t){return t.filter(function(t,n){return t.type==e})},P=function(e){for(var t={},n=0;n<e.length;n++)t[e[n].name]=e[n];return t},D=function(e,t){document.getElementById("operate").getElementsByTagName("p")[1].innerHTML="餐厅本金："+t.cash,document.getElementById("operate").getElementsByTagName("p")[2].innerHTML="排队人数："+(t.size()-c),document.getElementById("operate").getElementsByTagName("p")[3].innerHTML="空余位置："+(t.seats-c),document.getElementById("operate").getElementsByTagName("p")[4].innerHTML="队列数量："+t.size()},x=function e(t){if(t.size()<30){t.enqueue();var n=(new Date).getTime();t.queue[t.size()-1].tag(n),u.fire("customerWait",{restaurant:t,id:n}),D("queue",t)}setTimeout(function(){e(t)},1e3*Math.floor(5*Math.random()+1))},C=function(e){var t=e.args.restaurant,n=e.args.id;switch(e.type){case"customerWait":c<10&&(c++,B(t,n))}},H=function e(t){var n=t.args.restaurant;if(0!=y.length)if(X()){var r=y[0];y.shift();var o=F();switch(h[o.name]=o,r.type){case"customerOrder":var i=r.id;q(n,i,o);break;case"chefOrder":var a=r.dishes;S(n,a,o)}}else setTimeout(function(){e(t)},2e3)},I=function e(t){var n=t.args.restaurant;if(console.log(d),0!=d.length&&(console.log(J()),J())){var r=G();switch(m[r.name]=r,t.type){case"chefCalled":u.remove(t.type,e),N(n,r),0!=d.length&&e(t)}}},B=function(e,t){s[R(null)]=t,z(e,t).sitdown();var n=l[R(t)];new Promise(function(e,r){setTimeout(function(){(0,i.default)("domMove",{left:n[1],top:n[0],dom:document.getElementById("clients").getElementsByTagName("img")[R(t)]}),e()},500)}).then(function(){y.push({id:t,type:"customerOrder"}),u.fire("waiterCalled",{restaurant:e})})},q=function(e,t,n){new Promise(function(n,r){setTimeout(function(){for(var r=Math.floor(10*Math.random());r>0;r--)z(e,t).order(e.menu);p[t]=z(e,t).orderList.length,n()},3e3)}).then(function(){n.getOrder(z(e,t).orderList),L(e,t,n)})},L=function(e,t,n){for(var r=z(e,t).orderList,o=0,i=function(e){var n=d.filter(function(t,n){return t.name==r[e]});0==n.length?d.push({amount:[t],name:r[e]}):n[0].amount.push(t),o+=g[r[e]].cost},a=0;a<r.length;a++)i(a);e.cash-=o,D("cash",e),delete h[n.name],u.fire("chefCalled",{restaurant:e})},N=function e(t,n){var r=d.shift();n.cooking(r);new Promise(function(e,t){setTimeout(function(){e()},1e3*g[r.name].unitTime)}).then(function(){y.push({type:"chefOrder",dishes:r}),u.fire("waiterCalled",{restaurant:t}),0!=d.length?e(t,n):(delete m[n.name],u.regist("chefCalled",I))})},S=function(e,t,n){for(var r=0;r<t.amount.length;r++)p[t.amount[r]]--,n.serverDishes(),0==p[t.amount[r]]&&(W(e,t.amount[r]),delete p[t.amount[r]]);delete h[n.name],console.log(p)},W=function(e,t){z(e,t).eat();new Promise(function(n,r){setTimeout(function(){n()},3*z(e,t).orderList.length*1e3)}).then(function(){A(e,t)})},A=function(e,t){for(var n=z(e,t).orderList,r=0,o=0;o<n.length;o++)r+=g[n[o]].price;e.cash+=r,D("cash",e);new Promise(function(e,n){(0,i.default)("domMove",{left:1e3,top:800,dom:document.getElementById("clients").getElementsByTagName("img")[R(t)]}),setTimeout(function(){(0,i.default)("domMove",{left:1100,top:20,dom:document.getElementById("clients").getElementsByTagName("img")[R(t)]}),s[R(t)]=null,e()},500)}).then(function(){if(z(e,t).leave(),e.dequeue(U(e,t)),c--,e.size()>c){var n=e.queue[c].id;u.fire("customerWait",{restaurant:e,id:n})}});D("queue",e)},R=function(e){for(var t in s)if(s[t]==e)return t},U=function(e,t){for(var n=0;n<e.seats;n++)if(e.queue[n].id==t)return n;return-1},z=function(e,t){for(var n=0;n<e.seats;n++)if(e.queue[n].id==t)return e.queue[n];return null},F=function(){return v.filter(function(e,t){return!h[e.name]})[0]},X=function(){var e=0;for(var t in h)e++;return e!=v.length},G=function(){return w.filter(function(e,t){return!m[e.name]})[0]},J=function(){var e=0;for(var t in m)e++;return e!=w.length};t.default=function(e){k(e),b.onclick=function(){x(e)}}},"./src/class/Customer.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.orderList=[],this.id=""}return r(e,[{key:"tag",value:function(e){this.id=e}},{key:"order",value:function(e){var t=Math.floor(10*Math.random());console.log(">> Customer "+this.id+" Order "+e[t].name+"."),this.orderList.push(e[t].name)}},{key:"eat",value:function(){console.log(">> Customer "+this.id+" Eating.")}},{key:"sitdown",value:function(){console.log(">> Customer "+this.id+" Sitdown.")}},{key:"leave",value:function(){console.log(">> Customer "+this.id+" Leaving.")}}]),e}();t.default=o},"./src/class/Dishes.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function e(t,n,r,o){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.name=t,this.cost=n,this.price=r,this.unitTime=o}},"./src/class/Restaurant.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function(e){return e&&e.__esModule?e:{default:e}}(n("./src/class/Customer.js"));var i=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.cash=t.cash,this.seats=t.seats,this.staff=t.staff,this.queue=t.queue,this.menu=t.menu}return r(e,[{key:"fire",value:function(e){this.staff=this.staff.filter(function(t,n){return t.id!=e.id})}},{key:"hire",value:function(e){this.staff.push(e)}},{key:"enqueue",value:function(){var e=new o.default;this.queue.push(e)}},{key:"dequeue",value:function(e){return e?this.queue.splice(e,1):this.queue.shift()}},{key:"size",value:function(){return this.queue.length}}]),e}();t.default=i},"./src/class/Staff.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var u=function(){function e(t,n,r,o){a(this,e),this.name=t,this.salary=n,this.id=r,this.type=o,this.busy=!1}return r(e,[{key:"work",value:function(){console.log("A work by staff.")}}]),e}(),c=function(e){function t(e,n,r,i){return a(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n,r,i))}return i(t,u),r(t,[{key:"getOrder",value:function(e){console.log(">> Waitert "+this.name+" Order "+e+".")}},{key:"serverDishes",value:function(){console.log(">> Waiter "+this.name+" Server.")}}]),t}(),s=function(e){function t(e,n,r,i){a(this,t);var u=o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n,r,i));return u.current="",u}return i(t,u),r(t,[{key:"cooking",value:function(e){this.current=e,console.log(">> Chef "+this.name+" Cooking "+e.name+".")}},{key:"finishedCook",value:function(){console.log(">> Chef "+this.name+" Done.")}}]),t}();t.Waiter=c,t.Chef=s},"./src/index.js":function(e,t,n){"use strict";var r=a(n("./src/class/Restaurant.js")),o=(n("./src/class/Staff.js"),a(n("./src/class/Customer.js")),a(n("./src/class/Dishes.js"))),i=a(n("./src/action/observerFlow.js"));function a(e){return e&&e.__esModule?e:{default:e}}var u=[new o.default("fish",10,25,3),new o.default("tofu",20,34,5),new o.default("chicken",12,28,6),new o.default("dumplings",22,42,2),new o.default("rice",2,5,1),new o.default("cabbage",16,32,5),new o.default("beef",6,22,8),new o.default("salad",14,31,4),new o.default("sandwich",21,48,5),new o.default("bacon",11,29,2)],c=new r.default({cash:1e4,seats:10,staff:[],queue:[],repast:[],menu:u}),s=document.getElementById("operate").getElementsByTagName("p")[0];(0,i.default)(c),console.log(c),function e(){var t=new Date;s.innerHTML=t.toLocaleTimeString(),setTimeout(function(){e()},1e3)}()}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,